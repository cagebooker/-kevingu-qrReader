{"version":3,"file":"index.min.js","sources":["../src/index.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, memo } from \"react\";\nimport { ReactSVG } from \"react-svg\";\nimport QrReader from \"react-qr-scanner\";\nimport useSound from 'use-sound';\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst qrReader = memo((props) => {\n    const [scanResultStatus, setScanResultStatus] = useState('normal');   // normal, wait, error, success, warning\n    const [scanResultList, setScanResultList] = useState('');  // 編號、條碼號、時間、狀態\n    const [scanResultSuccessNumber, setScanResultSuccessNumber] = useState(1);\n    const [asynchronous, setAsynchronous] = useState(false);\n\n    const [playSuccess] = useSound(process.env.PUBLIC_URL + \"/assets/music/entryScan-success.mp3\");\n    const [playError] = useSound(process.env.PUBLIC_URL + \"/assets/music/entryScan-error.mp3\");\n\n    const getCurrentDateTime = () => {\n        const date = new Date();\n        const utcOffset = 8; // UTC+8\n        // 設定時區偏移\n        date.setUTCHours(date.getUTCHours() + utcOffset);\n        // 獲取年、月、日、時、分、秒\n        const year = date.getUTCFullYear();\n        const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');\n        const day = date.getUTCDate().toString().padStart(2, '0');\n        const hours = date.getUTCHours().toString().padStart(2, '0');\n        const minutes = date.getUTCMinutes().toString().padStart(2, '0');\n        const seconds = date.getUTCSeconds().toString().padStart(2, '0');\n        // 格式化時間\n        const formattedDateTime = `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n        return formattedDateTime;\n    };\n\n    const handleScan = useCallback(async (data) => {\n        if(data) {\n            if(scanResultStatus !== 'normal') return;\n            setScanResultStatus('wait');\n            const newScanResult = {\n                serialNumber: scanResultSuccessNumber<10?`0${scanResultSuccessNumber}`:scanResultSuccessNumber,\n                code: data.text,\n                time: getCurrentDateTime(),\n            };\n            setScanResultList([newScanResult, ...scanResultList]);\n            setScanResultSuccessNumber(scanResultSuccessNumber >= 99 ? 1 : scanResultSuccessNumber+1 );\n            setAsynchronous(true);\n        };\n    }, [scanResultStatus, scanResultList, scanResultSuccessNumber, setScanResultStatus]);\n    \n    const handleError = useCallback((err) => {\n        if(err) console.log(err)\n    }, []);\n\n    useEffect(() => {\n        if(asynchronous){\n            props.data(scanResultList);\n            setScanResultStatus('wait');\n            setAsynchronous(false);\n        };\n    }, [scanResultStatus, asynchronous, props, scanResultList, setAsynchronous, setScanResultStatus]);\n\n\n    useEffect(() => {\n        const setStatusWithDelay = (status, playSound) => {\n            setScanResultStatus(status);\n            if (playSound) playSound();\n            if (status !== 'normal' && status !== 'wait') {\n                setTimeout(() => {\n                    setScanResultStatus('normal');\n                    props.setStatus('normal');\n                }, 3000);\n            }\n        };\n        switch(props.status) {\n            case 'normal':\n                setScanResultStatus('normal');\n                break;\n            case 'wait':\n                setStatusWithDelay('wait', null);\n                break;\n            case 'success':\n                setStatusWithDelay('success', playSuccess);\n                break;\n            case 'warning':\n                setStatusWithDelay('warning', playError);\n                break;\n            default:\n                setStatusWithDelay('error', playError);\n                break;\n        }\n    }, [props, playSuccess, playError]);\n    \n\n\n    return (\n        <div>測試用</div>\n    )\n});\n\n// 匯出函式\nmodule.exports = qrReader;"],"names":["qrReader","memo","props","scanResultStatus","setScanResultStatus","useState","scanResultList","setScanResultList","scanResultSuccessNumber","setScanResultSuccessNumber","asynchronous","setAsynchronous","playSuccess","useSound","process","env","PUBLIC_URL","playError","getCurrentDateTime","date","Date","setUTCHours","getUTCHours","getUTCFullYear","getUTCMonth","toString","padStart","getUTCDate","getUTCMinutes","getUTCSeconds","useCallback","async","data","newScanResult","serialNumber","code","text","time","err","console","log","useEffect","setStatusWithDelay","status","playSound","setTimeout","setStatus","React","createElement","module","exports"],"mappings":"6OAOA,MAAMA,EAAWC,EAAIA,MAAEC,IACnB,MAAOC,EAAkBC,GAAuBC,EAAQA,SAAC,WAClDC,EAAgBC,GAAqBF,EAAQA,SAAC,KAC9CG,EAAyBC,GAA8BJ,EAAQA,SAAC,IAChEK,EAAcC,GAAmBN,EAAQA,UAAC,IAE1CO,GAAeC,EAAQ,QAACC,QAAQC,IAAIC,WAAa,wCACjDC,GAAaJ,EAAQ,QAACC,QAAQC,IAAIC,WAAa,qCAEhDE,EAAqBA,KACvB,MAAMC,EAAO,IAAIC,KAGjBD,EAAKE,YAAYF,EAAKG,cAFJ,GAYlB,MAD2B,GAPdH,EAAKI,qBACHJ,EAAKK,cAAgB,GAAGC,WAAWC,SAAS,EAAG,QAClDP,EAAKQ,aAAaF,WAAWC,SAAS,EAAG,QACvCP,EAAKG,cAAcG,WAAWC,SAAS,EAAG,QACxCP,EAAKS,gBAAgBH,WAAWC,SAAS,EAAG,QAC5CP,EAAKU,gBAAgBJ,WAAWC,SAAS,EAAG,MAGpC,EA+D5B,OA5DmBI,EAAWA,aAACC,UAC3B,GAAGC,EAAM,CACL,GAAwB,WAArB7B,EAA+B,OAClCC,EAAoB,QACpB,MAAM6B,EAAgB,CAClBC,aAAc1B,EAAwB,GAAI,IAAGA,IAA0BA,EACvE2B,KAAMH,EAAKI,KACXC,KAAMnB,KAEVX,EAAkB,CAAC0B,KAAkB3B,IACrCG,EAA2BD,GAA2B,GAAK,EAAIA,EAAwB,GACvFG,GAAgB,EACpB,IACD,CAACR,EAAkBG,EAAgBE,EAAyBJ,IAE3C0B,EAAAA,aAAaQ,IAC1BA,GAAKC,QAAQC,IAAIF,EAAI,GACzB,IAEHG,EAAAA,WAAU,KACH/B,IACCR,EAAM8B,KAAK1B,GACXF,EAAoB,QACpBO,GAAgB,GACpB,GACD,CAACR,EAAkBO,EAAcR,EAAOI,EAAgBK,EAAiBP,IAG5EqC,EAAAA,WAAU,KACN,MAAMC,EAAqBA,CAACC,EAAQC,KAChCxC,EAAoBuC,GAChBC,GAAWA,IACA,WAAXD,GAAkC,SAAXA,GACvBE,YAAW,KACPzC,EAAoB,UACpBF,EAAM4C,UAAU,SAAS,GAC1B,IACP,EAEJ,OAAO5C,EAAMyC,QACT,IAAK,SACDvC,EAAoB,UACpB,MACJ,IAAK,OACDsC,EAAmB,OAAQ,MAC3B,MACJ,IAAK,UACDA,EAAmB,UAAW9B,GAC9B,MACJ,IAAK,UACD8B,EAAmB,UAAWzB,GAC9B,MACJ,QACIyB,EAAmB,QAASzB,GAEpC,GACD,CAACf,EAAOU,EAAaK,IAKpB8B,EAAA,QAAAC,cAAA,MAAA,KAAK,MAAS,IAKtBC,OAAOC,QAAUlD"}